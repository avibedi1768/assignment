Questions (DDL + DML)
Write SQL to create the three tables: categories, suppliers, and products.

(a) Retrieve a list of all products with their category name and supplier name.
select p.product_name, c.category_name, s.supplier_name
from products p, categories c, suppliers s 
where p.category_id = c.category_id and p.supplier_id = s.supplier_id;

(b) Find all products where stock quantity is below 5.
select product_name from products where stock_quantity < 5;

(c) Add a new column discount_percent to the products table with a default value of 0.
alter table products
add column discount_percent int default 0;

(d) Write a query to reduce the price of all products in the "Electronics" category by 15%.
set sql_safe_updates = 0; 	-- turn the safe mode off

update products
set price = price * 0.85
where category_id = (
	select category_id from categories where category_name = 'Electronics'
);


Questions (Aggregate, Filtering, Grouping, Sorting)
(e) Find the total number of products available in the products table.
select count(*) as count from products;

(f) Find the average price of all products.
select avg(price) as avg_price from products;

(g) Find the maximum and minimum price of products in the "Electronics" category.
select max(price) as min, min(price) as max from products;

(h) List categories along with the count of products in each category.
select c.category_name, count(p.product_id)
from  products p, categories c
where p.category_id = c.category_id 
group by p.category_id;

(i) List suppliers who supply products priced between $50 and $200.
select s.supplier_name
from products p, suppliers s
where p.price >= 50 and p.price <= 200 and p.supplier_id = s.supplier_id
group by p.supplier_id;

(j) Find all products whose category_id is in the list of category IDs (1, 3).
select product_name 
from products
where category_id in (1, 3);

(k) Find the total stock quantity per category but only for categories having more than 1 product.
select c.category_name, sum(p.stock_quantity) as sum
from categories c, products p 
where c.category_id = p.category_id
group by p.category_id
having sum(p.stock_quantity) > 0;

(l) List all products grouped by supplier and show the average price per supplier, but only for suppliers whose average product price is greater than $100.
select s.supplier_name, avg(p.price)
from suppliers s, products p
where s.supplier_id = p.supplier_id
group by p.supplier_id
having avg(p.price) > 100;

(m) List all products sorted by price in descending order.
select product_name, price
from products 
order by price desc;

(n) List the total value of stock (price * stock_quantity) for each category, ordered by total value from highest to lowest.
select c.category_name, sum(p.price * p.stock_quantity) as amt
from categories c, products p 
where c.category_id = p.category_id
group by p.category_id
order by sum(p.price * p.stock_quantity) desc;


10 Questions on JOINS
(a) Write a query to list all products with their corresponding category name using an INNER JOIN.
select p.product_name, c.category_name
from products p
inner join categories c 
on p.category_id = c.category_id;

(b) Write a query to list all products with their category name, including products that do not belong to any category (LEFT JOIN).
select p.product_name, c.category_name
from products p
left join categories c 
on p.category_id = c.category_id;

(c) Write a query to list all categories and the count of products in each category, including categories with no products (LEFT JOIN and GROUP BY).
select c.category_name, count(p.product_id)
from categories c
left join products p
on c.category_id = p.category_id
group by c.category_id;

(d) Write a query to list all products along with their supplier names, including products that have no supplier assigned (LEFT JOIN).
select p.product_name, s.supplier_name
from products p
left join suppliers s
on p.supplier_id = s.supplier_id

(e) Write a query to list all suppliers and the products they supply, including suppliers who supply no products (RIGHT JOIN).
select s.supplier_name, p.product_name
from suppliers s 
right join products p 
on s.supplier_id = p.supplier_id;

(f) Write a query to find all products that do not have a supplier assigned.
select product_name from 
products where supplier_id = null;

(g) Write a query to get all products with their category name and supplier name using multiple JOINs (join products with both categories and suppliers).
select p.product_name, s.supplier_name, c.category_name
from products p
join categories c on p.category_id = c.category_id
join suppliers s on p.supplier_id = s.supplier_id;

(h) Write a query to get a list of all suppliers and categories, even if there are no products linking them (FULL OUTER JOIN between suppliers and categories).
select s.supplier_name, c.category_name
from suppliers s, categories c;

(i) Write a query to find products where the supplier's contact email is not null using a join.
select p.product_name, s.supplier_name
from products p, suppliers s
where s.contact_email is not null;

(j) Write a query to find categories that have products supplied by supplier named 'Global Goods'.
select c.category_name
from categories c
where c.category_id in(
select p.category_id 
from products p, suppliers s
where p.supplier_id = s.supplier_id and s.supplier_name = 'Global Goods'
);